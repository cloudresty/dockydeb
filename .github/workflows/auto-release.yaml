name: Auto Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release (patch, minor, major)'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major

env:
  REGISTRY: docker.io
  IMAGE_NAME: cloudresty/dockydeb

jobs:
  # Check if we should create a release
  check-release:
    name: Check Release Conditions
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version: ${{ steps.check.outputs.version }}
      is_new_version: ${{ steps.check.outputs.is_new_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if release should be created
        id: check
        run: |
          SHOULD_RELEASE=false
          IS_NEW_VERSION=false

          # Get current version from version.env
          CURRENT_VERSION=$(grep "DOCKYDEB_VERSION=" version.env | cut -d'=' -f2)
          echo "Current version: $CURRENT_VERSION"

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual release trigger - will create release"
            SHOULD_RELEASE=true
          elif [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "Push to main branch - checking if version is new..."
            
            # Check if this version tag already exists
            if git tag --list | grep -q "^${CURRENT_VERSION}$"; then
              echo "Version ${CURRENT_VERSION} already has a tag - skipping release"
              SHOULD_RELEASE=false
            else
              echo "Version ${CURRENT_VERSION} is new - will create release"
              SHOULD_RELEASE=true
              IS_NEW_VERSION=true
            fi
          fi

          echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "is_new_version=$IS_NEW_VERSION" >> $GITHUB_OUTPUT

  # Build and test the container before release
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: check-release
    if: needs.check-release.outputs.should_release == 'true'
    outputs:
      image_built: ${{ steps.build.outputs.image_built }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and test Docker image
        id: build
        run: |
          VERSION="${{ needs.check-release.outputs.version }}"
          echo "Building DockyDEB version: $VERSION"

          # Build the image
          docker build --no-cache -t ${{ env.IMAGE_NAME }}:$VERSION -t ${{ env.IMAGE_NAME }}:latest .

          # Test basic functionality
          echo "Testing basic container functionality..."
          docker run --rm ${{ env.IMAGE_NAME }}:$VERSION zsh --version
          docker run --rm ${{ env.IMAGE_NAME }}:$VERSION curl --version
          docker run --rm ${{ env.IMAGE_NAME }}:$VERSION git --version
          docker run --rm ${{ env.IMAGE_NAME }}:$VERSION htop --version || true

          # Test shell environment
          docker run --rm ${{ env.IMAGE_NAME }}:$VERSION zsh -c "echo 'Shell test successful'"

          # Test Oh My Zsh installation
          docker run --rm ${{ env.IMAGE_NAME }}:$VERSION test -d /root/.oh-my-zsh && echo "Oh My Zsh installed"

          echo "All tests passed successfully!"
          echo "image_built=true" >> $GITHUB_OUTPUT

  # Create GitHub release and tag
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [check-release, build-and-test]
    if: needs.check-release.outputs.should_release == 'true' && needs.build-and-test.outputs.image_built == 'true'
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create GitHub Release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.check-release.outputs.version }}"
          VERSION_NUMBER="${VERSION#v}"
          
          # Determine release type
          RELEASE_TYPE="patch"
          if [ "${{ github.event.inputs.release_type }}" != "" ] && [ "${{ github.event.inputs.release_type }}" != "auto" ]; then
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          fi

          # Get latest commits since last release for changelog
          LAST_TAG=$(git tag --sort=-version:refname | head -1 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline ${LAST_TAG}..HEAD --no-merges | head -10)
          else
            COMMITS=$(git log --oneline --no-merges -10)
          fi

          # Format changelog
          CHANGELOG=""
          if [ -n "$COMMITS" ]; then
            CHANGELOG="### Changes\n"
            echo "$COMMITS" | while read -r line; do
              CHANGELOG="${CHANGELOG}\n- $line"
            done
          fi

          # Create release body
          RELEASE_BODY="## DockyDEB $VERSION

          **Automated release** - This release includes updated packages and the latest debugging tools.

          ### What's Updated
          - Updated base Debian packages
          - Latest versions of debugging tools
          - Refreshed container image with security patches

          $CHANGELOG

          ### Usage
          \`\`\`bash
          docker pull cloudresty/dockydeb:$VERSION
          docker pull cloudresty/dockydeb:latest
          \`\`\`

          ### Tools Included
          - curl, wget, git
          - dnsutils, iputils-ping, net-tools  
          - htop, btop, ncdu
          - vim, zsh with Oh My Zsh
          - Powerlevel10K theme with plugins
          - And many more debugging utilities

          ---
          *This release was automatically generated by the CI pipeline.*"

          # Create the release
          gh release create "$VERSION" \
            --title "DockyDEB $VERSION" \
            --notes "$RELEASE_BODY" \
            --target main

          echo "Created GitHub release: $VERSION"
          echo "release_created=true" >> $GITHUB_OUTPUT

  # Push Docker images to Docker Hub
  docker-release:
    name: Docker Hub Release
    runs-on: ubuntu-latest
    needs: [check-release, build-and-test, create-release]
    if: needs.create-release.outputs.release_created == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.CLR__DOCKER_HUB_USERNAME }}
          password: ${{ secrets.CLR__DOCKER_HUB_PAT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ needs.check-release.outputs.version }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:latest
          cache-to: type=inline
          platforms: linux/amd64,linux/arm64

      - name: Docker push summary
        run: |
          echo "Docker images pushed successfully:"
          echo "- ${{ env.IMAGE_NAME }}:latest"
          echo "- ${{ env.IMAGE_NAME }}:${{ needs.check-release.outputs.version }}"
          echo ""
          echo "Multi-platform build completed (linux/amd64, linux/arm64)"

  # Final success notification
  release-complete:
    name: Release Complete
    runs-on: ubuntu-latest
    needs: [check-release, create-release, docker-release]
    if: success()
    steps:
      - name: Release summary
        run: |
          echo "## DockyDEB Release Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ needs.check-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**GitHub Release**: Created successfully" >> $GITHUB_STEP_SUMMARY  
          echo "**Docker Images**: Pushed to Docker Hub" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull cloudresty/dockydeb:${{ needs.check-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "docker pull cloudresty/dockydeb:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "DockyDEB debugging container is now available with the latest updates!" >> $GITHUB_STEP_SUMMARY

      - name: Success notification
        run: |
          echo "DockyDEB release workflow completed successfully!"
          echo "Version: ${{ needs.check-release.outputs.version }}"
          echo "GitHub release: Created"
          echo "Docker images: Pushed to Docker Hub"
          echo ""
          echo "The DockyDEB debugging container is now updated and available!"
